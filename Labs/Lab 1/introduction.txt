Introduction to CMD 
In this section of today's lab you will learn: 
1) open command Prompt
2) navigate your file tree using the 'cd' command
3) make and remove directories
4) make, open, and remove files
5) clear your screen.

When you are working in the IT / Software development space.  This is a workflow you will do all the time. It is 
good to get used to using the terminal in addition to your normal GUI.

The way we interact with a computer on a day to day basis is through the GUI (Graphical User Interface).
But that wasn't always the case.  And in many ways it is still easier to the terminal.  Today we are
going to introduce just a couple of commands that are useful in everday use.

first open the Command Prompt (Terminal in Linux) by pressing windows+r, typing cmd, and press return.

From here you can navigate the file structure of your machine.  Create and exectue files, and run your
whole computer.  for example type "start chrome.exe yahoo.com"

The first command we will learn is 'dir'  This is on windows.  On Linux systems it is 'ls'
dir will list out and show you all of the files and directories in the current working directory.

Speaking of current working director.  lets go ahead and change the one we are in.  If you look at 
the list of directories shown on your screen you should see the 'Doucuments' folder listed.  lets jump 
into that one.

The command is 'cd <path to the directory>  So for us it would be 'cd Documents'.  Notice how the text before
your curser has changed.  it went from C:\Users\username> to C:\Users\username\Documents>.  Now we can use the dir
command again to see what is in this directory.

Now lets make a new directory.  The 'mkdir <filename>  will make a new folder with 'filename' in yoru current 
working directory.  Lets try it out.  Make a directory called itech190-test.  (mkdir itech190-test) Once
you have run the mkdir command, run the dir command again to see your new directory.

Now lets cd into our itech190-test directory

once we are here, lets make a new txt document.  First lets use the dir command to show that our directory is 
currently empty.  Now let's use the 'echo' command to create a new file.  Normally echo will just display whatever
you want to the screen.  For example type the command 'echo test.txt'.  Notice that test.txt is displayed to the 
screen.  But if you run the dir command again, your directory is still empty.

However, if we use the '>' key with echo we can create a new file.  Enter the comane 'echo > test.txt'.  Now this 
time there is no output but if you run the dir comand again you will see that there is now a file in your directory 
called test.txt!

lets get rid of that.  It was just a test document anyways right?  'del <filename>' is the command we will use to 
delete this file.  go ahead and delete it 'del test.txt'

But what if I actually wanted to open that file and write stuff to it?  lets do that now!

First, lets create a new text file called todo.  'echo > todo.txt' and then to open it we have to tell the computer 
which program to use to open it.  In our case notepad will work.  the command is 'notepad todo.txt'  This will open
out todo.txt file in a notepad.  How exciting!   

Alright.  Lets go ahead and get out of here.  close the notepad.  The commane is alt-F4.  Note this is a windows
shortcut.  Not a cmd specific one.  So it will close down ANY app/program you are currently in.  So make sure that
the app you want to close is currently active.  go ahead and alt-F4 the notpad and your curser will go to the most
recent app you used before the one you just closed.

lets delete the todo file with 'del todo.txt'

Now lets go back the the documents directory.  Currently we are in C:\Users\username\Documents\itech190-test.  To get 
back to the Documents directory the command is 'cd ../'.  This is the same cd command as before,  except the '../'  
tells the computer we want to go back up a level.

Now that we are in the Documents directory lets go ahead and delete the itech190-test directory we made.  At first 
you may think that you can use the same 'del' command that we did earlier to delete a file.  however that will only 
delete the files in the itech190-test directory.  But the directory will still remain.

To delete the directory we want to use the 'rmdir' command.  Go ahead and try that now.  If you had any subfolders
or documents in your directory, that command failed.  it gave you an error 'The directory is not empty'.  This is 
a safety feature.  In order to force it to delete the directory and ALL of the content in the directory, we will 
add in the /s command.  so now the cammand is 'rmdir /s itech190-test'

go ahead and run this command now.  followed by the 'dir' command in order to confirm you have deleted the whole directory

One last bit of clean up.  You currently have A LOT of text on your screen.  All of the commands, all of the directories
printed out multiple times.  lets clear the screen.  the command for this is 'cls'.  And boom!  you are back to a bank 
screen.


To get ready for the next part of the lab: 
1) cd into C:\users\username
2) create a new directory called itech190 - this will be your main projects folder for the rest of the semester
3) cd into itech190
4) open that directory with the command 'code .' - code is the command for openening VsCode and . tells the computer 
you want to open the directory you are currently in.

Introduction to GIT 
In this part of today's lab, we are going to:
1) create a GitHub account if you don't already have one. 
2) create a repository
3) learn how to clone a repository 
4) make our first commits and pushes. 

The first step is to create your GitHub account if you don't already have one.  If you do, simply login and wait for / skip to
the next section.  There are no directions for this here.  Simply go to https://github.com , click the 'Sign Up' button in 
the upper right corner, and follow the instructions.

Once you have created your account it is time to create your first repository.  From the home screen look for a green button
near the upper left that says 'New' and click it.  Name it itech190-lab1.  This is important.  That is the specific repo Name
I will search for when grading.  

Make sure the 'Public' radio button is checked, and you can add a README file if you if wish to.  Once you have done that, click
the 'Create Repository' button at the bottom of the page.

The next page will show you some settings and some code snippets.  What we want is the link in the 'Quick Setup' box that has 
our repo address.  https;//github.com/username/reponame.git 

Copy that address and hold onto it for now.

Back in VsCode, the top menu ribbon has an menu option called 'Terminal' click it and select 'New Terminal'.  this will open 
a terminalat the bottom of your screen.  This terminal is the same as the cmd terminal we were just using.  Different session
but same program.  

In the termial, type the command  'git clone yourgitrepoaddress'

this will clone your remote reposity into your current working directory.  Take a look at your file tree on the left and you will
see a new folder called 'itech190-lab1'.  lets go ahead and create a new file in there.  Right click the itech190-lab1 directory
in the file tree, and select the 'New File' option.  Name it index.py.  For now, leave the file blank.  But lets save our work 
and send all of our changes back to github.

in your terminal, lets make sure we are in the correct directory.  Since we are working on the itech190-lab1 repo, make sure your
terminal shows your directory as '....ITECH190\itech190-lab1>'  Currently it most likely is in the main ITECH190 directory.  Go 
ahead and cd into the itech190-lab1 repo.  (cd itech190-lab1)

now type the command 'git status'  this will bring up a list of files that have various changes.  The next thing
we want to do is add all of the new changes.  You can either add specific files by typing 'git add pathtofile' or if you want to
add ALL of the files, you can enter the command 'git add -A'

Once you have added yoru changes, we can commit them.  the command for this is 'git commit -m "yoru message goes here"'  For this 
one lets just use the message "my first commit"  So the command to enter is 'git commit -m "my first commit"'

Finally we want to push our commit to the remote repo on GitHub.  to do that all we need to do is 'git push'

Now if you go back to your GitHub page and look at yoru repositories, you will see your changes are now updated!

To recap, you have just create yoru github account, created a repository, cloned it onto your local machine, made updates,
commited those changes, and then pushed them back to the cloud.  Awesome!!

Introduction to Python
Welcome to your first ptyhon lab!
Python is a very popular programming language used in academics, research, 
web development, analytics, and machine learning.  it has a simple syntax
and is often the first language, peole will learn.

In today's lab we are going to learn the very basics of creating a program
in python.  We are going to cover:

1) input
2) output
3) variables
4) simple expressions

And we are going to do this by creating a simple number guessing game!

first step is to create a new file in your lab1 directory called 'index.py'
index is traditionally, across languages, the default main file name.  it 
isn't required in python, but still generally used. 

right click the lab1 directory in your file tree, select new file, name it 
index.py

lets get started right away and get something displaying on screen.

type the following line: 

print("hello world")

That's it.  The classic print hello world.  this is the first thing people 
do when learning languages.

now clear out your terminal with the cls command.  or open one if you have closed 
your previous one, and make sure you are in the correct directory.  your terminal
cusrer should be '...\itech190-lab1>'

once you are there, you can run your program by entering the command 'python index.py'

Boom!  your console should show the string "Hello World"

print()  is the basic output method.  Anytime we want to display something to
the screen in python we use print().  All it does is print out the string that you 
put inside of the parenthases.

Lets spice it up a little bit and introduce variables.  

variables are storage locations in memory associated with some known or unknown qunatity 
of data or object referred to as a value.  Wow, that was a mouthful.  Put bluntly  a 
variable is a named value.  the value can be a simple number, it can be a string, an object, 
or anything we want.  We can then call that value by the variable name, instead of having to
write out the value all over again.

Example:  message = "Hello World"

now we can update our program like so:

message = "Hello World"
print(message)

Once you have made the updates, run the progaram again with 'python index.py'

It should work exactly the same as before.  And that is perfect.

While this example may seem trivial, there are several advantages going on here.  First, 
I can use this as many times as I want.  let's say i had a program where for some reason I 
needed to print "Hello World"  100 times in various places.  It is fairly trivial to type 
Hello World over and over again.  And it is only marginally easier to type 'message'  over
and over again.  However!  Let's say I needed to update it.  Now I want to print out 
"Hello Cass Lake" each of those times.  

Without using variable, I would have to go through and find each and every one of those messages
and update it.  But with variables, we only need to update it in the 1 place where it is defined.
In fact, it is best practice to use variables almost exclusively.

Before we move on, there is a little bit about python syntax I want to cover.

Variable names HAVE to start with a letter or and underscore.  lower case or upper case doesn't
matter.  But it can't start with a number or any special character other than an underscore.

In python the nameing convention for variables is snake case, where each word is separated by 
an underscore.  this_is_an_example_of_snake_casssssse.

In python (well most langauges) it is also customary to make constants all capiatlized.  for example
say you are making a video game and you want to define the size of each cell in a grid.  That would 
be considered a constant because once you set it, it should never be changed.  So we would write
that as CELL_SIZE instead of cell_size.  from the computers perspective it doesn't matter.  It is 
just naming convention to make it easier for people reading the code to understand at a glance 
what is going on. 

Deciding what is a variable and what should be a constant really is an artform, and you will get used
to it over time.

Python statements are deliniated by line breaks.  In most languages statements are deliniated
with a semicolon ';'.  In many langauges  the following three examples are functionally identical
to eachother

message = "Hello World";
print(message);

message = "Hello World"; print(message);

message = "Hello World";
    print(message);

This is because the semicolon is what defines the end of a satement.  In python, that is not the case.
All three of the above statements are wildly different.  In python line breaks define the end of a
statement.  And indentation matters.  

This is valid (notice no semicolons): 
message = "Hello World"
print(message)

This is not valie:
message = "Hello World"
    print(message)

notice the indentation on the second line.  indentation is used with if statements, methods, objects, 
and loops.  As this is none of those, you will get a syntax error. Go ahead and give it a try.  Take 
a look at what the terminal says if you try to indent the print() statement.

This is all well and good.  But the program isn't a fun game yet.
Lets add some input.

First update our message to 'What is your name?'
Then after we print that message, lets add a new variable called name, and we will set that to 
equal input().  Finally we will print would a welcome message to the users by using an fstring. 

an fstring is a string that can accept variables.  They are quite versitile, but we will only be covering 
the basic use case today. to create our fstring we can simply add braces {} where we want to insert our 
variables.  in this case, we have saved your name in the 'name' variable so we can do something like this:

welcome_message = f"Welcome {name}!"

Your code should look like this: 
message = "What is your name?"
print(message)
name = input()

welcome_message = f"Welcome {name}!"
print(welcome_message)

Go ahead and try it out.  Make sure it works and you are happy with it before we move on.

Next lets get started with the guessing game.  First we need to create a new variable to store a 
random number.  For now, we will just hard code it and come back to the random part later.  Go ahead
and set your new variable 'random_number' to equal any number you want between 1 and 10.

next lets ask the player to guess a number between 1 and 10.  We will do this by creating a variable
called guess_prompt and setting it equal to "Please guess a number between 1 and 10."  then we will 
use the input() command again to store whatever the user inputs.  then finally add a print() at the
end to just print out our guess_number and the random_number


Now your code should look like this:
message = "what is your name? "
print(message)
name = input()

welcome_message = f"welcome {name}"
print(welcome_message)

random_number = 7
guess_prompt = "Please guess a number between 1 and 10"
print(guess_prompt)
guess_number = input()

print(f"you guessed {guess_number} and the random number is {random_number}")

Things to note.  By adding white space between chunks of code, we can group related things together 
making it easier to read.

go ahead and run your program and make sure it is running correctly.

Time for the almost final step.  Time to check to see if the number you guessed is correct
or not.

Start by adding two new variables; correct_message and wrong_message.  You can use whatever string 
you want for them to convey to the user that they guessed correctly and won.  Or that they guessed
incorrectly and they lost.

For example:
correct_message = "Congrats!!  you guessed the secret number."
wrong_message = "Sorry, that guess was incorrect."

Next we will look into 'if statements'  If statements are used constantly in programming.  We are always 
checking to see if a value equals another value, or if a condition is true.  In python the syntax for
if statements is this:

if conditional:
    do_something()
else:
    do_something_else()

we start with the keword if,that is followed by our conditional, finally the line ends with a colon ':' .
The next lines are indented.  all of the code that is indented will be executed if the conditional is true.
if the conditional is false, it will skip the indented line(s).

The else keyword is optional.  if it is present it will run only if the conditional is false.  if the
conditional is true, the whole else block is skipped.

In our case we want to see if the guessed_number is equal to the random_number (our conditional).  If it
is then we want to print our the correct_message (our true code). if they aren't equal we want to print
out the wrong_message (our else code)

example:
if random_number == guessed_number:
    print(correct_message)
else: 
    print(wrong_message)

added into our existing code it now looks like this: 
message = "what is your name? "
print(message)
name = input()

welcome_message = f"welcome {name}"
print(welcome_message)

random_number = 7
guess_prompt = "Please guess a number between 1 and 10"
print(guess_prompt)
guess_number = input()

correct_message = "Congrats!!  you guessed the secret number."
wrong_message = "Sorry, that guess was incorrect."
if random_number == guess_number:
    print(correct_message)
else:
    print(wrong_message)


NOTICE:  if you look at the line 'if random_number == guess_number:'  you will see that there
are two equals signs there.  That is not a mistake.  In programing a single equal sign is an
assignment.  You are telling the computer that A equals B.  Two equals signs is a comparator.
You are asking the computer IF A equals B.

Go ahead and run this make sure it works before moving on.  You will notice that it works for the most
part, but if you guess the correct number it still gives you the wrong_message.  Why is that?

The reason is inputs are alwasy strings.  even if you enter a number, python will think it is a string.
So to the computer the number 7 is not equal to the string 7.  To fix this, we just need to tell python
that guessed_number is in fact a number and not a string.  So we are going to do what is called casting.
We are going to cast guess_number to an integer (whole number).  To do that, we simply wrap our value 
with int().

in our case it looks like:
guess_number = int(input())

now guess_number will be a number (integer) and our program will work.  Goahead and make the change to 
your code and confirm that it works.
